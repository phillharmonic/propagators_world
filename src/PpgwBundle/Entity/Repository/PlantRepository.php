<?php

namespace PpgwBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PlantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlantRepository extends EntityRepository
{
//    public function checkLight($plant){
//        $plant_id = $plant->getId();
//        
//        $query = $this->getEntityManager()
//                ->createQuery('
//                    SELECT p 
//                    FROM BloggerBlogBundle:PlantLight p
//                    WHERE p.plant_id = :id
//                ')
//                ->setParameter('id', 3);
//                
//        if(count($query->getResult()) == 3 ){
//            return null;
//        }else {return $query->getResult(); }
//        
//    }
    
    public function getBloomColor($plant){
        
        $colorArray = array();
        foreach ($plant->getFlowerColor() as $colorOption){
            $colorArray[] .= $colorOption->getName();
        }
        if(count($colorArray) > 1){
            return 'Variety of colors';
        }else{return 'Unspecified';}
    }
    
    public function getLight($plant){
        
        $lightArray = array();
        foreach ($plant->getLight() as $lightOption){
            $lightArray[] .= $lightOption->getName();
        }
        if(count($lightArray) > 1){
            return 'Tolerates variety of light';
        }else{return 'Unspecified';}
    }
    
    public function getLatestPlants($limit = null){
        $qb = $this->createQueryBuilder('p')
               ->select('p')
               ->addOrderBy('p.taxGenus', 'ASC')
                ->addOrderBy('p.taxSpecies', 'ASC')
                 ->addOrderBy('p.taxVariety', 'ASC');

        if (false === is_null($limit))
            { $qb->setMaxResults($limit); }

        return $qb->getQuery()
                  ->getResult();
    }
    
    public function getSortedPlants($letter){
        $qb = $this->createQueryBuilder('p');
               $qb->select('p')
               ->where($qb->expr()->like('p.taxGenus', '?1'))
               ->addOrderBy('p.taxGenus', 'ASC')
                ->addOrderBy('p.taxSpecies', 'ASC')
                 ->addOrderBy('p.taxVariety', 'ASC')
                  ->setParameter(1, $letter.'%');

//        if (false === is_null($limit))
//            { $qb->setMaxResults($limit); }

        return $qb->getQuery()
                  ->getResult();
    }
    
    public function getPlantsInGroup($group){
        $qb = $this->createQueryBuilder('p');
               $qb->select('p')
               ->where('p.plantGroup = ?1')
               ->addOrderBy('p.taxGenus', 'ASC')
                ->addOrderBy('p.taxSpecies', 'ASC')
                 ->addOrderBy('p.taxVariety', 'ASC')
                  ->setParameter(1, $group);

        return $qb->getQuery()
                  ->getResult();
    }
    
    public function getPlantsByKeyword($keyword){
        $qb = $this->createQueryBuilder('p');
               $qb->select('p')
               ->where($qb->expr()->like('p.name', ':name'))
               ->addOrderBy('p.taxGenus', 'ASC')
                ->addOrderBy('p.taxSpecies', 'ASC')
                 ->addOrderBy('p.taxVariety', 'ASC')
                  ->setParameter('name', '%' . $keyword . '%');

        return $qb->getQuery()
                  ->getResult();
    }
    
    public function getBloomTimeString($plant){
        
        /*
         * Calculate bloom time from array results
         */
        
        $ar = array();
        $plantBts = $plant->getBloomTimes();
        foreach($plantBts as $month){
            $ar[] = $month->getId();
        }
        
        $newAr = array();
        $winter = array(12,1,2);
        $spring = array(3,4,5);
        $summer = array(6,7,8);
        $autumn = array(9,10,11);

        //evaluate the contents of the array and collect desired results:
        if(count(array_intersect($ar, $winter)) > 0){
            $newAr[] = 'Winter';
        }
        if(count(array_intersect($ar, $spring)) > 0){
            $newAr[] = 'Spring';
        }
        if(count(array_intersect($ar, $summer)) > 0){
            $newAr[] = 'Summer';
        }
        if(count(array_intersect($ar, $autumn)) > 0){
            $newAr[] = 'Autumn';
        }
        
        //limit string to two seasons:
        if(count($newAr) > 2){
            array_pop($newAr);
        }
        
        $string = '';
        //return a formated string
        foreach($newAr as $var){
            $string .= $var.' & ';
        }
        
        return substr($string, 0, -2);
    }
    
    public function getWildlifeStr($plant){
        $ar = array();
        $string = '';
        $wildlife = $plant->getAttracts();
        foreach($wildlife as $critter){
            $ar[] = $critter->getName();
        }
        //return a formated string
        foreach($ar as $var){
            $string .= $var.', ';
        }
        
        return substr($string, 0, -2);
    }
    
    public function getDiseasesStr($plant){
        $ar = array();
        $string = '';
        $diseases = $plant->getDiseases();
        foreach($diseases as $disease){
            $ar[] = $disease->getName();
        }
        //return a formated string
        foreach($ar as $var){
            $string .= $var.', ';
        }
        
        return substr($string, 0, -2);
    }
    
    public function getPestsStr($plant){
        $ar = array();
        $string = '';
        $pests = $plant->getPests();
        foreach($pests as $pest){
            $ar[] = $pest->getName();
        }
        //return a formated string
        foreach($ar as $var){
            $string .= $var.', ';
        }
        
        return substr($string, 0, -2);
    }    
    
    public function getPropMethodsStr($plant){
        $ar = array();
        $string = '';
        $methods = $plant->getPropagationMethod();
        foreach($methods as $method){
            $ar[] = $method->getName();
        }
        //return a formated string
        foreach($ar as $var){
            $string .= $var.', ';
        }
        
        return substr($string, 0, -2);
    }    
}
